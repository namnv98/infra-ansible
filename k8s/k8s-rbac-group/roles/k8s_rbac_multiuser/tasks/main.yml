---
# =========================================
# 1️⃣ Tạo namespace nếu chưa tồn tại
# =========================================
- name: Ensure namespaces exist
  shell: kubectl create namespace {{ item }} --dry-run=client -o yaml | kubectl apply -f -
  loop: "{{ k8s_rbac_namespaces }}"
  args:
    _uses_shell: true

# =========================================
# 2️⃣ Tạo ServiceAccount cho từng user
# =========================================
- name: Ensure ServiceAccounts for each user
  shell: |
    {% for ns in group.value.namespaces %}
    {% for user in group.value.users %}
    kubectl apply -f - <<EOF
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: {{ user }}-sa
      namespace: {{ ns }}
    EOF
    {% endfor %}
    {% endfor %}
  loop: "{{ k8s_rbac_groups | dict2items }}"
  loop_control:
    loop_var: group
  args:
    _uses_shell: true

# =========================================
# 3️⃣ Sinh Role/RoleBinding cho từng namespace trong group
# =========================================
- name: Apply namespace Roles & Bindings
  shell: kubectl apply -f -
  args:
    stdin: "{{ lookup('template', 'rolebinding_ns.yaml.j2') }}"
    _uses_shell: true

# =========================================
# 4️⃣ Sinh ClusterRole/ClusterRoleBinding nếu nhóm có namespace "*"
# =========================================
- name: Apply ClusterRoles & Bindings for global groups
  when: "'*' in group.value.namespaces"
  shell: kubectl apply -f -
  args:
    stdin: "{{ lookup('template', 'clusterrolebinding.yaml.j2') }}"
    _uses_shell: true
  loop: "{{ k8s_rbac_groups | dict2items }}"
  loop_control:
    loop_var: group

# =========================================
# 5️⃣ Sinh kubeconfig cho từng user
# =========================================
- name: Ensure remote kubeconfig dir
  file:
    path: "{{ kubeconfig_dir | default('/tmp/kubeconfigs') }}"
    state: directory
    mode: '0755'
- name: Generate kubeconfig per user (with ServiceAccount token)
  shell: |
    {% for ns in group.value.namespaces %}
    {% for user in group.value.users %}

    echo "[INFO] Generating kubeconfig for user '{{ user }}' in namespace '{{ ns }}'"

    # Path to kubeconfig file
    KUBECONFIG_FILE="{{ kubeconfig_dir | default('/tmp/kubeconfigs') }}/{{ user }}.kubeconfig"

    # Get token from ServiceAccount
    TOKEN=$(kubectl -n {{ ns }} create token {{ user }}-sa)

    # Set cluster info
    kubectl config set-cluster user-cluster \
      --server={{ kube_apiserver_url | default('https://192.168.56.10:6443') }} \
      --certificate-authority={{ kube_ca_path | default('/etc/kubernetes/pki/ca.crt') }} \
      --embed-certs=true \
      --kubeconfig="$KUBECONFIG_FILE"

    # Set user credentials
    kubectl config set-credentials {{ user }} \
      --token="$TOKEN" \
      --kubeconfig="$KUBECONFIG_FILE"

    # Set context
    kubectl config set-context {{ user }}-context \
      --cluster=user-cluster \
      --namespace={{ ns }} \
      --user={{ user }} \
      --kubeconfig="$KUBECONFIG_FILE"

    # Switch to context
    kubectl config use-context {{ user }}-context \
      --kubeconfig="$KUBECONFIG_FILE"

    {% endfor %}
    {% endfor %}
  loop: "{{ k8s_rbac_groups | dict2items }}"
  loop_control:
    loop_var: group
  args:
    executable: /bin/bash
  changed_when: false


# =========================================
# 6️⃣ Copy kubeconfigs về localhost
# =========================================
- name: Ensure local kubeconfigs folder exists
  file:
    path: ./kubeconfigs
    state: directory
    mode: '0755'
  delegate_to: localhost

- name: Fetch kubeconfig files
  fetch:
    src: "{{ kubeconfig_dir | default('/tmp/kubeconfigs') }}/{{ item }}.kubeconfig"
    dest: "./kubeconfigs/{{ item }}.kubeconfig"
    flat: yes
  loop: "{{ k8s_rbac_groups | dict2items | map(attribute='value.users') | flatten | unique }}"
  ignore_errors: true
