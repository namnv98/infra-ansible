- name: Ensure namespaces exist
  shell: kubectl create namespace {{ item }} --dry-run=client -o yaml | kubectl apply -f -
  loop: "{{ k8s_rbac_namespaces }}"
  args:
    _uses_shell: true

- name: Ensure ServiceAccounts exist
  shell: |
    kubectl apply -f - <<EOF
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: {{ item2.value[0] }}
      namespace: {{ item2.key }}
    EOF
  loop: "{{ k8s_rbac_serviceaccounts | dict2items }}"
  loop_control:
    loop_var: item2
  args:
    _uses_shell: true


- name: Apply namespace-scoped Roles and RoleBindings
  shell: kubectl apply -f -
  args:
    stdin: "{{ lookup('template', 'role_ns.yaml.j2') }}"
    _uses_shell: true

- name: Apply cluster-scoped ClusterRoles and ClusterRoleBindings
  shell: kubectl apply -f -
  args:
    stdin: "{{ lookup('template', 'clusterrole.yaml.j2') }}"
    _uses_shell: true

- name: Ensure remote kubeconfig directory exists
  file:
    path: "{{ kubeconfig_dir | default('/tmp/kubeconfigs') }}"
    state: directory
    mode: '0755'
- name: Generate kubeconfig for each user
  vars:
    # Tìm team chứa user hiện tại (trả về key)
    team_for_user: "{{ (k8s_rbac_users | dict2items | selectattr('value', 'contains', item) | map(attribute='key') | first) }}"
    # Lấy namespace tương ứng team
    ns_for_user: "{{ k8s_rbac_team_namespace[team_for_user] }}"
    # Lấy serviceaccount đầu tiên của namespace đó
    sa_for_user: "{{ (k8s_rbac_serviceaccounts[ns_for_user] | first) }}"
  shell: |
    USER="{{ item }}"
    TEAM="{{ team_for_user }}"
    NAMESPACE="{{ ns_for_user }}"
    SA="{{ sa_for_user }}"
    KUBECONFIG_FILE="{{ kubeconfig_dir | default('/tmp/kubeconfigs') }}/{{ item }}.kubeconfig"

    echo "[INFO] Generating kubeconfig for user=$USER (team=$TEAM ns=$NAMESPACE sa=$SA)"

    TOKEN=$(kubectl -n "$NAMESPACE" create token "$SA")

    kubectl config set-cluster user-cluster \
      --server=https://192.168.56.10:6443 \
      --certificate-authority=/etc/kubernetes/pki/ca.crt \
      --embed-certs=true \
      --kubeconfig="$KUBECONFIG_FILE"

    kubectl config set-credentials "$USER" \
      --token="$TOKEN" \
      --kubeconfig="$KUBECONFIG_FILE"

    kubectl config set-context "$USER-context" \
      --cluster=user-cluster \
      --namespace="$NAMESPACE" \
      --user="$USER" \
      --kubeconfig="$KUBECONFIG_FILE"

    kubectl config use-context "$USER-context" --kubeconfig="$KUBECONFIG_FILE"
  loop: "{{ k8s_rbac_users.values() | flatten | unique }}"
  args:
    executable: /bin/bash
  changed_when: false


- name: Ensure local kubeconfigs folder exists
  file:
    path: ./kubeconfigs
    state: directory
    mode: '0755'
  delegate_to: localhost

- name: Fetch kubeconfig files for users
  fetch:
    src: "{{ kubeconfig_dir | default('/tmp/kubeconfigs') }}/{{ item }}.kubeconfig"
    dest: "./kubeconfigs/{{ item }}.kubeconfig"
    flat: yes
  loop: "{{ k8s_rbac_users.values() | flatten | unique }}"
